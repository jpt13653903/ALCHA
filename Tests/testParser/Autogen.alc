class RegistersDecoder(Bus): AvalonInterface(32, 0x1000){
  Bus.Attach(this);
  //----------------------------------------------------------------------------

  private{
    'RdRegisters   = [];
    'WrRegisters   = [];
    'LiveRegisters = [];
    num Count = 0;
  }
  //----------------------------------------------------------------------------

  public{
    // Register direction as seen by the controller
    void ReadOnly(Register){
      Register'Address = Count++;
      'RdRegisters.append(Register);
    }
    void Writeable(Register){
      Register'Address = Count++;
      'WrRegisters.append(Register);
    }
    void Live(RdRegister, WrRegister, WrStrobe){
      RdRegister'Address = Count;
      WrRegister'Address = Count;
      WrStrobe  'Address = Count;
      'LiveRegisters.append(< Read   = RdRegister,
                              Write  = WrRegister,
                              Strobe = WrStrobe >);
      Count++;
    }
    //--------------------------------------------------------------------------

    net(32) Resize(x){
      result := x; // Raw-assign the bits
      num N = x'width;
      if((x'fullscale < 0) & (N < 31)) // Sign-extend
        result(31..(N+1)) := (x(N))`(31-N);
    }
    //--------------------------------------------------------------------------

    void GenerateRegs(){
      rtl(Bus.Clock, Bus.Reset){
        WaitRequest = 0;

        switch(Address){
          for(Register in 'RdRegisters){
            case(Register'Address) ReadData = Resize(Register);
          }
          for(Register in 'WrRegisters){
            case(Register'Address) ReadData = Resize(Register);
          }
          for(Register in 'LiveRegisters){
            case(Register'Read'Address) ReadData = Resize(Register'Read);
          }
        }
        ReadValid = Read;

        if(Write){
          switch(Address){
            for(Register in 'WrRegisters){
              case(Register'Address) Register := WriteData;
            }
            for(Register in 'LiveRegisters){
              case(Register'Write'Address) Register'Write := WriteData;
            }
          }
          for(Register in 'LiveRegisters){
            Register'Strobe = ((Address == Register'Strobe'Address) & Write);
          }
        }
      }
    }
    //--------------------------------------------------------------------------

    void GenerateCpp(string Filename){
      !! Generate the C++ source and header files
      !! Base the structure on the Register'identifier attribute, which is the
      !! full name of the object (including the full name-space path)
    }
    //--------------------------------------------------------------------------

    void GenerateLaTeX(string Filename){
      !! Generate the LaTeX documentation files
    }
    //--------------------------------------------------------------------------

    string CppFilename   = "";
    string LaTeXFilename = "";

    void finally(){
      GenerateRegs();
      if(CppFilename  'length) GenerateCpp  (CppFilename  );
      if(LaTeXFilename'langth) GenerateLaTeX(LaTeXFilename);
    }
  }
}
//------------------------------------------------------------------------------

