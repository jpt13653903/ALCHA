Module = [Statements];

Statements = Statement {Statement};
Statement  = Label | Definition | ClassDefinition | EnumDefinition
           | Alias | Import | Struct | Group | AccessDirectionGroup
           | IfStatement | For | While  | Loop | Switch | Jump | GoTo
           | FunctionCall | NamespacePush | Assignment
           | RTL | FSM | HDL 
           | Stimulus | Emulate | ForkJoin | Assert | Sequence | ";";

Label  = Identifier ":"; (* Only useful within an fsm construct *)

Definition = ( BaseType | TypeIdentifier ) [ParameterList]
             [AttributeList] IdentifierList;

ClassDefinition = "class" [AttributeList] Identifier
                  ["(" [DefParameterList] ")"] 
                  [
                    ":" TypeIdentifier [ParameterList]
                   {"," TypeIdentifier [ParameterList]}
                  ]
                  "{" [Statements] "}";

(* Only useful within a class body *)
AccessDirectionGroup = ( ( AccessSpecifier [DirectionSpecifier] ) |
                         ( DirectionSpecifier ) ) StatementBlock;
AccessSpecifier    = "public" | "private" | "protected";
DirectionSpecifier = "input" | "output";

BaseType = "pin"  | "net"          (* Synthesisable types *)
         | "void" | "auto"         (* Used as function return types *)
         | "byte" | "char" | "num" (* Scripting types     *)
         | "func" ;                (* Function pointer    *)

IdentifierList = FunctionDef | (VariableDef {"," VariableDef} ";");

VariableDef    = Identifier {ArrayDefinition} [Initialiser];
FunctionDef    = ["inline"] Identifier {ArrayDefinition} 
                 "(" [DefParameterList] ")" 
                 "{" [Statements] "}" ;

ArrayDefinition  = "[" [Expression] "]";
Initialiser      = ("=" | ":=") Expression;

DefParameterList = DefParameter {"," DefParameter};
DefParameter     = [BaseType | TypeIdentifier] Identifier {"[" "]"} 
                   [Initialiser];

AttributeList       = "<" AttributeAssignment {, AttributeAssignment} ">";
AttributeAssignment = Identifier "=" Primary;

EnumDefinition = "enum" Identifier "{" Identifier {"," Identifier} "}";

TypeIdentifier = Identifier {"." Identifier}; (* NameSpace.TypeName *)
(*----------------------------------------------------------------------------*)

