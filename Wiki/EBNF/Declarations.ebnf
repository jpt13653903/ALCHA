Module = [Statements];

(* Wait statements only valid within Stimulus and Emulate blocks *)
Statements = Statement {Statement};
Statement  = [Wait]
             (Label | Definition | ClassDefinition | EnumDefinition
           | Alias | Import | Struct | Group | AccessDirectionGroup
           | IfStatement | For | While  | Loop | Switch | Case | Jump | GoTo
           | FunctionCallStatement | NamespacePush | Assignment
           | RTL | FSM | HDL
           | Stimulus | Emulate | ForkJoin | Assert | ";");

Label  = Identifier ":"; (* Only useful within an fsm construct *)

(* Inline only applies to function definitions *)
Definition = ["inline"] ( BaseType | TypeIdentifier ) [ParameterList]
             [AttributeList] (IdentifierList | FunctionDef | OperatorOverload);

ClassDefinition = "class" [AttributeList] Identifier
                  ["(" [DefParameterList] ")"]
                  [
                    ":" TypeIdentifier [ParameterList]
                   {"," TypeIdentifier [ParameterList]}
                  ]
                  "{" [Statements] "}";

(* Only useful within a class body *)
AccessDirectionGroup = ( ( AccessSpecifier [DirectionSpecifier] ) |
                         ( DirectionSpecifier ) ) StatementBlock;
AccessSpecifier    = "public" | "private" | "protected";
DirectionSpecifier = "input" | "output";

BaseType = "pin"  | "net"          (* Synthesisable types *)
         | "void" | "auto"         (* Used as function return types *)
         | "byte" | "char" | "num" (* Scripting types     *)
         | "func" ;                (* Function pointer    *)

IdentifierList   = VariableDef {"," VariableDef} ";";
VariableDef      = Identifier {ArrayDefinition} [Initialiser];
FunctionDef      = (Identifier {ArrayDefinition})
                   "(" [DefParameterList] ")"
                   "{" [Statements] "}" ;
OperatorOverload = ("operator" Operator)
                   "(" [DefParameterList] ")"
                   "{" [Statements] "}" ;

ArrayDefinition  = "[" [Expression] "]";
Initialiser      = ("=" | ":=") Expression;

DefParameterList = DefParameter {"," DefParameter};
DefParameter     = [(BaseType | TypeIdentifier) [ParameterList]]
                   Identifier {"[" "]"} [Initialiser];

AttributeList       = "<" AttributeAssignment {"," AttributeAssignment} ">";
AttributeAssignment = Identifier "=" Primary;

EnumDefinition = "enum" Identifier "{" Identifier {"," Identifier} "}";

TypeIdentifier = Identifier {"." Identifier}; (* NameSpace.TypeName *)
(*----------------------------------------------------------------------------*)

