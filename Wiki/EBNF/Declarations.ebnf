Module = [Statements];

Statements = Statement {Statement};
Statement  = Definition | ClassDefinition | EnumDefinition
           | Alias | Import | Group
           | IfStatement | ForLoop | WhileLoop  | LoopLoop | Switch | Jump
           | FunctionCall | NamespacePush | Assignment
           | RTL | FSM | HDL | ";";

Definition = (BaseType | TypeIdentifier | "void" | "auto")
             [CastEpr] [AttributeList] IdentifierList;

ClassDefinition = "class" [AttributeList] Identifier
                  ["("[DefParameterList]")"] 
                  [
                    ":" TypeIdentifier ["(" [ParameterList] ")"]
                   {"," TypeIdentifier ["(" [ParameterList] ")"]}
                  ]
                  "{" [Statements] "}";

BaseType = "pin"  | "net"  | "clk" (* Synthesisable types *)
         | "byte" | "char" | "num" (* Scripting types     *)
         | "func" ;                (* Function pointer    *)

IdentifierList = FunctionDef | (VariableDef {"," VariableDef} ";");

VariableDef    = Identifier {ArrayDefinition} [Initialiser];
FunctionDef    = Identifier {ArrayDefinition} "(" [DefParameterList] ")" 
                 "{" [Statements] "}";

ArrayDefinition  = "[" [Expression] "]";
Initialiser      = ("=" | ":=") Expression;

DefParameterList = DefParameter {"," DefParameter};
DefParameter     = [BaseType | TypeIdentifier] Identifier {"[" "]"} [Initialiser];

AttributeList       = "<" AttributeAssignment {, AttributeAssignment} ">";
AttributeAssignment = Identifier "=" Primary;

EnumDefinition = "enum" Identifier "{" Identifier {"," Identifier} "}";

TypeIdentifier = Identifier {"." Identifier}; (* NameSpace.TypeName *)
(*----------------------------------------------------------------------------*)

