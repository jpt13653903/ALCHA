WhiteSpace = Space | Newline | LineComment | BlockComment;

Space   = ? U+0020 ? | ? U+0009 ? | ? U+00A0 ? | ? U+1680 ? | ? U+180E ? 
        | ? U+2000 ? | ? U+2001 ? | ? U+2002 ? | ? U+2003 ? | ? U+2004 ? 
        | ? U+2005 ? | ? U+2006 ? | ? U+2007 ? | ? U+2008 ? | ? U+2009 ? 
        | ? U+200A ? | ? U+202F ? | ? U+200B ? | ? U+200C ? | ? U+200D ? 
        | ? U+205F ? | ? U+2060 ? | ? U+3000 ? | ? U+FEFF ? ;
Newline = ? U+0A U+0D ? | ? U+0D U+0A ? | ? U+0A ? | ? U+0D ? | ? U+0B ? 
        | ? U+0C ? | ? U+85 ? | ? U+2028 ? | ? U+2029 ? ;
       
LineComment   = "//" {? Any byte sequence ? -Newline} Newline;
BlockComment  = "/*" {? Any byte sequence ? -"*/"} "*/";
NestedComment = "/+" {NestedComment | (? Any byte sequence ? -"+/")} "+/";
Byte          = ? Any input byte that does not belong to anything else ?;
(*----------------------------------------------------------------------------*)

Token      = String | Literal | Keyword | Identifier | Operator;

Special    = "__FILE__"  | "__LINE__" | "__DATE__" | "__TIME__" 
           | "__CLASS__" | "__FUNCTION__" | "__NAMESPACE__";

Keyword    = "set_target"
           | "void"   | "auto" 
           | "pin"    | "net"  | "clk" 
           | "byte"   | "char"
           | "int"    | "rat"  | "float"  | "complex" | "class" | "enum"
           | "in"     | "out"
           | "if"     | "else" | "for"    | "while" | "loop" 
           | "switch" | "case" | "default" 
           | "import" | "as" 
           | "return" | "break"  | "continue"
           | "rtl" | "fsm" | "hdl";

Operator   = "++" | "--"  | "'"   | "->" | "@"  | "."  | ".{" | "&"  | "~&" 
           | "|"  | "~|"  | "#"   | "~#" | "~"  | ":"  | "\"  | "+"  | "-"
           | "*"  | "/"   | "%"   | "^"  | "<<" | ">>" | "<"  | ">"  | "<=" 
           | ">=" | "=="  | "!="  | "!"  | "&&" | "||" | "?"  | "="  | ":=" 
           | "~=" | "+="  | "-="  | "*=" | "/=" | "%=" | "^=" | "&=" | "|=" 
           | "#=" | "<<=" | ">>=" | "("  | ")"  | "["  | "]"  | "{"  | "}"  
           | ","  | ";";

Literal        = ("0b" Binary) | ("0o" Octal) | ("0x" Hexadecimal) | Decimal;

Identifier     = (NonDigit {D | NonDigit}) -Keyword; 

String         = '"' {EscapeSequence | (Byte - '"')} '"' [String];

EscapeSequence = "\n" | "\t" | "\v" | "\b" | "\r" | "\f" 
               | "\a" | "\\" | "\?" | "\'" | '\"' 
               | ("\x" H H) | ("\u" H H H H) | ("\U" H H H H H H H H)
               | ("\" O {O}) 
               | ("\&" ? Any of the HTML-5 character names ? ";");

(* Either the left of the ".", or the right of the "." must have a digit *)
(* Within literals, the "_" character is ignored *)
Binary      = {B} ["." {B}] [("p" | "P"            ) Exponent] ["i" | "j"];
Octal       = {O} ["." {O}] [("p" | "P"            ) Exponent] ["i" | "j"];
Hexadecimal = {H} ["." {H}] [("p" | "P"            ) Exponent] ["i" | "j"];
Decimal     = {D} ["." {D}] [("p" | "P" | "e" | "E") Exponent] ["i" | "j"];
Exponent    = ["-" | "+"] D {D};
(*----------------------------------------------------------------------------*)

B = "0" | "1";
O = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7";
D = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
H = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" 
  | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F"; 

NonDigit = ?"a".."z"? | ?"A".."Z"? | "_" 
         | (? Any Unicode >= U+80 ? -Space -Newline);
(*----------------------------------------------------------------------------*)

