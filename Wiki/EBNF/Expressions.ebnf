Expression     = BitwiseOR      ( [ "?" Cast ":" Cast] | [ "?:" Cast ]);
BitwiseOR      = BitwiseXOR     {("|"  | "~|")              BitwiseXOR    };
BitwiseXOR     = BitwiseAND     {("^"  | "~^")              BitwiseAND    };
BitwiseAND     = Equality       {("&"  | "~&")              Equality      };
Equality       = Relational     {("==" | "!=")              Relational    };
Relational     = Shift          {("<"  | ">" | "<=" | ">=") Shift         };
Shift          = Additive       {("<<" | ">>")              Additive      };
Additive       = Multiplicative {("+"  | "-" )              Multiplicative};
Multiplicative = Exponential    {("*"  | "/" | "%")         Exponential   };
Exponential    = Replication    { "**"                      Replication   };

Replication    = Stringification ["`" Primary];   (* Vector replication  *)

(* When used as a function, the second parameter must evaluate to a string *)
Stringification = ["$"] Reduction 
                |  "$(" Reduction ["," Expression] ")";
                
Reduction = ["&" | "~&" | "|" | "~|" | "^" | "~^" | "!"] Range;

Range = Unary [".." Unary [":" Unary]];

Unary   = {"-" | "~" | ":" | "++" | "--"} Postfix;

Postfix = Cast { Array                   | (* Slice *)
                 "(" [ParameterList] ")" | (* Function call *)
                 "."  Identifier         | (* Member reference *)
                 "?." Identifier         | (* Safe member reference *)
                 "'"  Identifier         | (* Attribute reference *)
                 "++"                    | (* Increment *)
                 "--"                    | (* Decrement *)
                 "!"                    }; (* Factorial *)

Cast    = Primary [CastEpr];
CastEpr = "@" ( Identifier | Literal
              | ("(" ExpressionList ")") );

(* The "::" and "'" prefixes chooses the global scope *)
Primary = (["'"] Identifier) | Literal | "true" | "false"
        | VectorConcat | ArrayConcat | Array | String | ("(" Expression ")");

(* These perform vector or array concatenation *)
VectorConcat = ":(" ExpressionList ")";
ArrayConcat  = ":[" ExpressionList "]";

(* This builds an array (an array of arrays when nested) *)
Array = "[" ExpressionList "]";

ExpressionList = Expression {","  Expression };
ParameterList  = [Identifier ("=" | ":=")] Expression {
             "," [Identifier ("=" | ":=")] Expression };
(*----------------------------------------------------------------------------*)

