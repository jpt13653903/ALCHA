(* NOTE:
- Remember to implement sets -- see ICIT 2016 article for details.
*)

Assignment = LHS_Expression AssignmentOperator Expression;

LHS_Expression = Concatenation;
Expression     = Conditional;

AssignmentOperator = 
   "=" | (* Assign, but take fixed-point format into account *)
  ":=" | (* Assign without bit-weight (straight assign) *)
  "@=" | (* Assign without bit-weight (straight assign) *)
  "+=" | (* Add and assign *)
  "-=" | (* Subtract and assign *)
  "*=" | (* Multiply and assign *)
  "/=" | (* Divide and assign *)
  "%=" | (* Modulus and assign *)
  "&=" | (* Bitwise AND and assign *)
  "|=" | (* Bitwise OR and assign *)
  "^=" | (* Bitwise XOR and assign *)
 "<<=" | (* Shift left and assign *)
 ">>=" ; (* Shift right and assign *)

Conditional    = LogicalOR      [ "?" Primary ":" Primary];
LogicalOR      = LogicalAND     { "||"                      LogicalAND    };
LogicalAND     = BitwiseOR      { "&&"                      BitwiseOR     };
BitwiseOR      = BitwiseXOR     {("|"  | "~|")              BitwiseXOR    };
BitwiseXOR     = BitwiseAND     {("^"  | "~^")              BitwiseAND    };
BitwiseAND     = Equality       {("&"  | "~&")              Equality      };
Equality       = Relational     {("==" | "!=")              Relational    };
Relational     = Shift          {("<"  | ">" | "<=" | ">=") Shift         };
Shift          = Additive       {("<<" | ">>")              Additive      };
Additive       = Multiplicative {("+"  | "-" )              Multiplicative};
Multiplicative = Replication    {("*"  | "/" | "%")         Replication};

Replication   = Concatenation ["\" Primary];
Concatenation = Cast {":" Cast};

Cast       = Reduction ["'" (Identifier | Literal | ("(" Primary ["," Primary] ")"))];
Reduction  = ["&" | "~&" | "|" | "~|" | "^" | "~^" | "!"] Unary;
Unary      = {"-" | "~"} Array;

Array = ("@{" Expression {"," Expression} "}")
      | (Postfix ["->" Postfix ["#" Postfix]]);

Postfix = Primary {
           "["  SliceList      "]" | (* Slice *)
           "(" [ParameterList] ")" | (* Function call *)
           "."  Identifier         | (* Member reference *)
           "++"                    | (* Increment *)
           "--"                      (* Decrement *)
          };

Primary = Identifier | Literal | String | ("(" Expression ")");

ParameterList = Expression {"," Expression};
SliceList     = ":" | (Array {"," Array});
(*----------------------------------------------------------------------------*)

