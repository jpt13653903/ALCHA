import "../Target/BeMicro Max 10";
//------------------------------------------------------------------------------

// Alias traversal

alias LED    = USER_LED;
alias Button = SW;

LED := :(Button, ~Button);
//------------------------------------------------------------------------------

// Group member lookup

ADT7420.SCL = AD5681R.SCL;
//------------------------------------------------------------------------------

// Pin members

net Data = 0;

ADT7420.SDA'pullup  = true;
ADT7420.SDA.driver  = 0;
ADT7420.SDA.enabled = ~Data;
//------------------------------------------------------------------------------

// Attribute lookup

num LED_Width     = LED'width;
num LED_FullScale = LED'fullscale;
num LED_Current   = LED'current;
//------------------------------------------------------------------------------

// Unsigned fixed-point scaling on multiplication operations

num Number = 1.23456;

net(14, 3 ) FP_U_TestNet = LED;

pin(14, 3 ) FP_U_Test01 =  0.1 *FP_U_TestNet;
pin(14, 3 ) FP_U_Test02 = 10   *FP_U_TestNet;
pin(14, 3 ) FP_U_Test03 =  4   *FP_U_TestNet;
pin(14, 3 ) FP_U_Test04 =  0.25*FP_U_TestNet;

pin(14, pi) FP_U_Test05 =  0.1 *FP_U_TestNet;
pin(14, pi) FP_U_Test06 = 10   *FP_U_TestNet;
pin(14, pi) FP_U_Test07 =  4   *FP_U_TestNet;
pin(14, pi) FP_U_Test08 =  0.25*FP_U_TestNet;

net(14)        FP_U_TestNet2 = 123;
pin(14, 1p100) FP_U_Test09 = FP_U_TestNet2;

pin(14, 255.99999999999) FP_U_Test10 = FP_U_TestNet2;

FP_U_Test05 *= FP_U_TestNet;

LVDS_TX = 0xABC;

net(16, 1) FP_U_Test20  = 0.123;
pin(32, 1) FP_U_Test21  = 2*FP_U_Test20;
pin(32, 1) FP_U_Test22 := 2*FP_U_Test20;

pin( 8) FP_U_Test23 = 123;
pin(40) FP_U_Test24 = FP_U_Test20`5;

GPIO := FP_U_Test05;
//------------------------------------------------------------------------------

// Correct multiply mixed-singed edge-case handling

pin( 8) Mul_MS_uA, Mul_MS_uB, Mul_MS_uC, Mul_MS_uD, Mul_MS_uE, Mul_MS_uF;
pin(-7) Mul_MS_sA, Mul_MS_sB, Mul_MS_sC, Mul_MS_sD;

pin( 16) Mul_MS_uA_uB = Mul_MS_uA * Mul_MS_uB;
pin(-15) Mul_MS_sA_uB = Mul_MS_sA * Mul_MS_uB;
pin(-15) Mul_MS_uA_sB = Mul_MS_uA * Mul_MS_sB;
pin(-15) Mul_MS_sA_sB = Mul_MS_sA * Mul_MS_sB;

Mul_MS_uA =    0;
Mul_MS_uB =  127;
Mul_MS_uC =  128;
Mul_MS_uD =  255;
Mul_MS_uE = -127;
Mul_MS_uF = -128;

Mul_MS_sA =    0;
Mul_MS_sB =  127;
Mul_MS_sC = -127;
Mul_MS_sD = -128;
//------------------------------------------------------------------------------

// Signed fixed-point scaling on multiplication operations
net(14, -3 ) FP_S_TestNet = -1.23;

pin(14, -3 ) FP_S_Test01 =  0.1 *FP_S_TestNet;
pin(14, -3 ) FP_S_Test02 = 10   *FP_S_TestNet;
pin(14, -3 ) FP_S_Test03 =  4   *FP_S_TestNet;
pin(14, -3 ) FP_S_Test04 =  0.25*FP_S_TestNet;

pin(14, -pi) FP_S_Test05 =  0.1 *FP_S_TestNet;
pin(14, -pi) FP_S_Test06 = 10   *FP_S_TestNet;
pin(14, -pi) FP_S_Test07 =  4   *FP_S_TestNet;
pin(14, -pi) FP_S_Test08 =  0.25*FP_S_TestNet;

pin(  8, 1) FP_S_Test10;
pin(-16, 1) FP_S_Test11 =  FP_S_Test10 * -10;
pin( -8, 1) FP_S_Test12 = -FP_S_Test10;
//------------------------------------------------------------------------------

// Add and Subtract mixed-signed

pin( 8, 1) AS_MS_uA, AS_MS_uB, AS_MS_uC, AS_MS_uD, AS_MS_uE, AS_MS_uF;
pin(-7, 1) AS_MS_sA, AS_MS_sB, AS_MS_sC, AS_MS_sD;

pin( 9, 2) Add_MS_uA_uB = AS_MS_uA + AS_MS_uB;
pin(-8, 2) Add_MS_sA_uB = AS_MS_sA + AS_MS_uB;
pin(-8, 2) Add_MS_uA_sB = AS_MS_uA + AS_MS_sB;
pin(-8, 2) Add_MS_sA_sB = AS_MS_sA + AS_MS_sB;

pin( 9, 2) Sub_MS_uA_uB = AS_MS_uA - AS_MS_uB;
pin(-8, 2) Sub_MS_sA_uB = AS_MS_sA - AS_MS_uB;
pin(-8, 2) Sub_MS_uA_sB = AS_MS_uA - AS_MS_sB;
pin(-8, 2) Sub_MS_sA_sB = AS_MS_sA - AS_MS_sB;
//------------------------------------------------------------------------------

// Multiply and divide

pin(8, 1) MD_A;
pin(8, 1) MD_B;
pin(8, 1) MD_C = MD_A * MD_B / pi;
//------------------------------------------------------------------------------

